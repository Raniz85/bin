#!/usr/bin/env python3

import argparse
from boto import ec2
import collections
import logging
import os
import re
import socket
import subprocess
import sys
import time
import traceback
import requests

proxy_regex = re.compile("^http://([^:]+):([0-9]+)$")

# Class that wraps a real socket and changes it to a HTTP tunnel whenever a connection is asked via the "connect" method
class ProxySock :

	def __init__(self, socket):

		# First, use the socket, without any change
		self.socket = socket

		# Create socket (use real one)
		try:
			proxy = os.environ["http_proxy"]
			match = proxy_regex.match(proxy)
			if match:
				self.proxy_host = match.group(1)
				self.proxy_port = int(match.group(2))
			else:
				self.proxy_host = None
				self.proxy_port = None
		except KeyError:
			self.proxy_host = None
			self.proxy_port = None

		# Copy attributes
		self.family = socket.family
		self.type = socket.type
		self.proto = socket.proto

	def connect(self, address) :
		if not self.proxy_host:
			self.socket.connect(address)
			return

		# Store the real remote adress
		(self.host, self.port) = address

		# Try to connect to the proxy 
		for (family, socktype, proto, canonname, sockaddr) in socket.getaddrinfo(
				self.proxy_host, 
				self.proxy_port,
				0, 0, socket.SOL_TCP) :
			try:

				# Replace the socket by a connection to the proxy
				self.socket = socket.socket(family, socktype, proto)
				self.socket.connect(sockaddr)

			except socket.error as msg:
				if self.socket:
					self.socket.close()
				self.socket = None
				continue
			break
		if not self.socket:
			raise socket.error(ms)

		# Ask him to create a tunnel connection to the target host/port
		self.socket.send(("CONNECT {}:{} HTTP/1.1\r\n" + 
					"Host: {}:{}\r\n\r\n").format(self.host, self.port, self.host, self.port).encode("ascii"));

		# Get the response
		resp = self.socket.recv(4096).decode("ascii")

		# Parse the response
		parts = resp.split()

		# Not 200 ?
		if parts[1] != "200" :
			raise Exception("Error response from Proxy server : %s" % resp)

	# Delegate everything else to the socket
	def __getattr__(self, attr):
		return getattr(self.socket, attr)

def require_instance(f):
	def wrapper(*args):
		if not args[0].instance:
			raise ValueError("No playground exists in region {}".format(
				args[0].connection.region.name ))
		return f(*args)
	return wrapper

class Playground:

	def __init__(self, connection, remote_user, ssh_args):
		self.connection = connection
		self.remote_user = remote_user
		self.ssh_args = ssh_args
		reservations = self.connection.get_all_instances(filters= {
			"tag:Name": "Playground"
		})
		if len(reservations) >= 0:
			self.instance = reservations[0].instances[0].id
		else:
			self.instance = None

	@require_instance
	def fetch_instance(self):
		return self.connection.get_all_instances(instance_ids=[self.instance])[0].instances[0]

	@require_instance
	def stop_instance(self):
		active_users = self.get_active_users()
		if len(active_users) > 0:
			print("Instance {} still has active users; not stopping".format(self.instance))
			print("\n".join(active_users))
			return
		print("Stopping instance {}".format(self.instance))
		i = self.fetch_instance()
		if i.state == "pending":
			print("Instance {} is starting; not shutting down".format(
				self.instance))
			return
		if i.state == "running":
			print("Instance {} is running; stopping".format(
				self.instance))
			self.connection.stop_instances(instance_ids=[self.instance])
		if i.state == "stopping":
			print("Instance {} is already stopping".format(
				self.instance))
	
	@require_instance
	def get_active_users(self):
		i = self.fetch_instance()
		hostname = i.dns_name
		command = [ "ssh"]
		command.extend(self.ssh_args)
		command.extend([
			"{}@{}".format(self.remote_user, hostname),
			"--",
			"who"
		])
		print("Checking for active users on instance {}".format(self.instance))
		p = subprocess.Popen(command, stdout=subprocess.PIPE)
		stdout, _ = p.communicate()
		return stdout.decode("utf-8").splitlines()

	@require_instance
	def start_instance(self):
		i = self.fetch_instance()
		did_start = False
		if i.state == "stopping":
			print("Instance {} is stopping; waiting until stopped".format(
				self.instance))
			self.await_instance_state("stopped")
			i = self.fetch_instance()
		if i.state == "stopped":
			print("Instance {} is stopped; starting".format(self.instance))
			self.connection.start_instances(instance_ids=[self.instance])
			did_start = True
		elif i.state == "pending":
			print("Instance {} is already starting".format(
				self.instance))
		self.await_instance_state()

	@require_instance
	def await_instance_state(self, desired_state="running"):
		print("Waiting for instance {} to reach state '{}'".format(
			self.instance, desired_state))
		i = self.fetch_instance()
		while i.state != desired_state:
			time.sleep(0.5)
			i = self.fetch_instance()

	def await_openssh(self):
		def is_port22_open():
			try:
				s = ProxySock(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
				s.settimeout(1)
				s.connect((hostname, 22))
				s.close()
				return True
			except Exception as e:
				pass
			return False
		i = self.fetch_instance()
		hostname = i.dns_name
		print("Waiting for port 22 to open on {}".format(hostname))
		while not is_port22_open():
			time.sleep(0.5)


	@require_instance
	def connect(self, sudo=False):
		i = self.fetch_instance()
		if i.state != "running":
			self.start_instance()
		self.await_openssh()
		i = self.fetch_instance()
		hostname = i.dns_name
		ssh_args = ["ssh"]
		ssh_args.extend(self.ssh_args)
		ssh_args.append("{}@{}".format(self.remote_user, hostname))
		if sudo:
			print("Connecting to {} with root privileges".format(hostname))
			ssh_args.append("--")
			ssh_args.append("sudo")
			ssh_args.append("-s")
		else:
			print("Connecting to {}".format(hostname))
		os.spawnvp(os.P_WAIT, "ssh", ssh_args)


# This is a mapping of all countries and their closest AWS regions. Taken from
# http://www.turnkeylinux.org/blog/geoip-amazon-regions
global REGION_MAPPING
REGION_MAPPING = {"A1":"us-east-1","A2":"us-east-1","AD":"eu-west-1","AE":"ap-southeast-1","AF":"ap-southeast-1","AG":"us-east-1","AI":"us-east-1","AL":"eu-west-1","AM":"eu-west-1","AN":"us-east-1","AO":"eu-west-1","AP":"ap-northeast-1","AQ":"ap-southeast-2","AR":"sa-east-1","AS":"ap-southeast-2","AT":"eu-west-1","AU":"ap-southeast-2","AW":"us-east-1","AX":"eu-west-1","AZ":"eu-west-1","BA":"eu-west-1","BB":"us-east-1","BD":"ap-southeast-1","BE":"eu-west-1","BF":"eu-west-1","BG":"eu-west-1","BH":"eu-west-1","BI":"eu-west-1","BJ":"eu-west-1","BM":"us-east-1","BN":"ap-southeast-1","BO":"sa-east-1","BR":"sa-east-1","BS":"us-east-1","BT":"ap-southeast-1","BV":"sa-east-1","BW":"eu-west-1","BY":"eu-west-1","BZ":"us-east-1","CA":"us-west-2","CC":"ap-southeast-1","CD":"eu-west-1","CF":"eu-west-1","CG":"eu-west-1","CH":"eu-west-1","CI":"eu-west-1","CK":"ap-southeast-2","CL":"sa-east-1","CM":"eu-west-1","CN":"ap-northeast-1","CO":"sa-east-1","CR":"us-east-1","CU":"us-east-1","CV":"eu-west-1","CX":"ap-southeast-1","CY":"eu-west-1","CZ":"eu-west-1","DE":"eu-west-1","DJ":"eu-west-1","DK":"eu-west-1","DM":"us-east-1","DO":"us-east-1","DZ":"eu-west-1","EC":"sa-east-1","EE":"eu-west-1","EG":"eu-west-1","EH":"eu-west-1","ER":"eu-west-1","ES":"eu-west-1","ET":"eu-west-1","EU":"eu-west-1","FI":"eu-west-1","FJ":"ap-southeast-2","FK":"sa-east-1","FM":"ap-northeast-1","FO":"eu-west-1","FR":"eu-west-1","GA":"eu-west-1","GB":"eu-west-1","GD":"us-east-1","GE":"eu-west-1","GF":"sa-east-1","GG":"eu-west-1","GH":"eu-west-1","GI":"eu-west-1","GL":"eu-west-1","GM":"eu-west-1","GN":"eu-west-1","GP":"us-east-1","GQ":"eu-west-1","GR":"eu-west-1","GS":"sa-east-1","GT":"us-east-1","GU":"ap-northeast-1","GW":"eu-west-1","GY":"sa-east-1","HK":"ap-southeast-1","HM":"ap-southeast-2","HN":"us-east-1","HR":"eu-west-1","HT":"us-east-1","HU":"eu-west-1","ID":"ap-southeast-1","IE":"eu-west-1","IL":"eu-west-1","IM":"eu-west-1","IN":"ap-southeast-1","IO":"ap-southeast-1","IQ":"eu-west-1","IR":"eu-west-1","IS":"eu-west-1","IT":"eu-west-1","JE":"eu-west-1","JM":"us-east-1","JO":"eu-west-1","JP":"ap-northeast-1","KE":"eu-west-1","KG":"ap-southeast-1","KH":"ap-southeast-1","KI":"ap-southeast-2","KM":"ap-southeast-1","KN":"us-east-1","KP":"ap-northeast-1","KR":"ap-northeast-1","KW":"eu-west-1","KY":"us-east-1","KZ":"eu-west-1","LA":"ap-southeast-1","LB":"eu-west-1","LC":"us-east-1","LI":"eu-west-1","LK":"ap-southeast-1","LR":"eu-west-1","LS":"ap-southeast-1","LT":"eu-west-1","LU":"eu-west-1","LV":"eu-west-1","LY":"eu-west-1","MA":"eu-west-1","MC":"eu-west-1","MD":"eu-west-1","ME":"eu-west-1","MG":"ap-southeast-1","MH":"ap-northeast-1","MK":"eu-west-1","ML":"eu-west-1","MM":"ap-southeast-1","MN":"ap-northeast-1","MO":"ap-southeast-1","MP":"ap-northeast-1","MQ":"us-east-1","MR":"eu-west-1","MS":"us-east-1","MT":"eu-west-1","MU":"ap-southeast-1","MV":"ap-southeast-1","MW":"ap-southeast-1","MX":"us-west-1","MY":"ap-southeast-1","MZ":"ap-southeast-1","NA":"eu-west-1","NC":"ap-southeast-2","NE":"eu-west-1","NF":"ap-southeast-2","NG":"eu-west-1","NI":"us-east-1","NL":"eu-west-1","NO":"eu-west-1","NP":"ap-southeast-1","NR":"ap-southeast-2","NU":"ap-southeast-2","NZ":"ap-southeast-2","O1":"us-east-1","OM":"ap-southeast-1","PA":"us-east-1","PE":"sa-east-1","PF":"us-west-1","PG":"ap-southeast-2","PH":"ap-southeast-1","PK":"ap-southeast-1","PL":"eu-west-1","PM":"us-east-1","PN":"us-west-1","PR":"us-east-1","PS":"eu-west-1","PT":"eu-west-1","PW":"ap-northeast-1","PY":"sa-east-1","QA":"eu-west-1","RE":"ap-southeast-1","RO":"eu-west-1","RS":"eu-west-1","RU":"ap-northeast-1","RW":"eu-west-1","SA":"eu-west-1","SB":"ap-southeast-2","SC":"ap-southeast-1","SD":"eu-west-1","SE":"eu-west-1","SG":"ap-southeast-1","SH":"sa-east-1","SI":"eu-west-1","SJ":"eu-west-1","SK":"eu-west-1","SL":"eu-west-1","SM":"eu-west-1","SN":"eu-west-1","SO":"ap-southeast-1","SR":"sa-east-1","ST":"eu-west-1","SV":"us-east-1","SY":"eu-west-1","SZ":"ap-southeast-1","TC":"us-east-1","TD":"eu-west-1","TF":"ap-southeast-1","TG":"eu-west-1","TH":"ap-southeast-1","TJ":"ap-southeast-1","TK":"ap-southeast-2","TL":"ap-southeast-1","TM":"eu-west-1","TN":"eu-west-1","TO":"ap-southeast-2","TR":"eu-west-1","TT":"us-east-1","TV":"ap-southeast-2","TW":"ap-northeast-1","TZ":"ap-southeast-1","UA":"eu-west-1","UG":"eu-west-1","UM":"ap-northeast-1","US":"us-east-1","UY":"sa-east-1","UZ":"eu-west-1","VA":"eu-west-1","VC":"us-east-1","VE":"sa-east-1","VG":"us-east-1","VI":"us-east-1","VN":"ap-southeast-1","VU":"ap-southeast-2","WF":"ap-southeast-2","WS":"ap-southeast-2","YE":"ap-southeast-1","YT":"ap-southeast-1","ZA":"ap-southeast-1","ZM":"eu-west-1","ZW":"eu-west-1"}
global DEFAULT_REGION
DEFAULT_REGION = "us-east-1"

WHOAMI="http://ec2-52-6-172-231.compute-1.amazonaws.com/"

def get_closest_region():
	ip = requests.get(WHOAMI).content.decode().strip()
	country = requests.get("http://api.hostip.info/country.php?ip={}".format(ip)).content.decode().strip()
	try:
		region = REGION_MAPPING.get(country, "ap-northeast-1")
		print("Using region {} for {} in {}".format(region, ip, country))
		return region
	except KeyError:
		print("Could not find region for {} in {}, defaulting to {}".format(region, ip, country, DEFAULT_REGION))
		return DEFAULT_REGION

if __name__ == "__main__":
	parser = argparse.ArgumentParser()

	parser.add_argument("-w", "--region", nargs="?",
		help="AWS Region to connect to")

	parser.add_argument("-p", "--profile", default=None,
		help="Boto profile to use for credentials, will use the default if not specified or invalid", metavar="PROFILE")

	parser.add_argument("-u", "--user", default="ubuntu",
		help="Remote user to connect as, defaults to ubuntu")

	parser.add_argument("-s", "--sudo", default=False, action="store_true",
		help="Start the remote shell with root privileges")

	parser.add_argument("-r", "--keep-running", default=False, action="store_true",
		help="Keep the instance running after closing the connection")

	parser.add_argument("ssh_args", nargs="*",
		help="Additional options to pass on to SSH")

	args = parser.parse_args()
	region = args.region
	if not region:
		region = get_closest_region()

	connection = ec2.connect_to_region(region, profile_name=args.profile)

	playground = Playground(connection, args.user, args.ssh_args)
	playground.connect(args.sudo)
	if not args.keep_running:
		try:
			for i in range(3, 0, -1):
				sys.stdout.write("\rShutting down instance {} in {} seconds; ^C to cancel".format(playground.instance, i))
				sys.stdout.flush()
				time.sleep(1)
			print()
			playground.stop_instance()
		except KeyboardInterrupt:
			print()
			print("Leaving instance {} running".format(playground.instance))
